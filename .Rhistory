library(tibble)
library(tidyverse)
load("data_public.Rdata")
data <- as_tibble(data)
glimpse(data)
require(tidyverse)
require(rempsyc)
library(FactoMineR)
library(factoextra)
library(rvest)
library(dplyr)
library(xml2)
library(patchwork)
library(gt)
library(tibble)
library(broom)
library(readxl)
library(lubridate)
library(ggplot2)
topics <- c(
"genderroles", "race", "politics", "trans", "religion",
"sexualorientation", "israelipalestinian", "covid", "freespeech", "abortion"
)
formal_sanctions <- c("stdnt_file_complaint", "instruc_grade",
"instruc_letter_of_rec")
informal_sanctions <- c(
"stdnt_friendship", "stdnt_gossip", "stdnt_social_media", "stdnt_romantic",
"stdnt_offensive", "instruc_dislike", "instruc_offensive", "instruc_incorrect")
personality_vars <- c("extraversion", "neuroticism", "agreeableness",
"conscientiousness", "openness")
colnames(data)
# Main Feature Construction
data <- data %>%
mutate(across(contains("_discuss"), ~ as.numeric(.), .names = "{col}_score"))
data$controversial_discuss_score <- data %>%
select(paste0(topics, '_discuss_score')) %>%
rowMeans(na.rm = TRUE)
data$yearinschool_num <- as.numeric(data$yearinschool)
data$`(average of controversial topics)_discuss_score` <- data$controversial_discuss_score
data$any_informal_sanction <- as.numeric(rowSums(select(data,
all_of(informal_sanctions)), na.rm = TRUE) >= 1)
data$any_formal_sanction <- as.numeric(rowSums(select(data,
all_of(formal_sanctions)), na.rm = TRUE) >= 1)
data$any_sanction <- as.numeric(rowSums(select(data, all_of(c(informal_sanctions,
formal_sanctions))), na.rm = TRUE) >= 1)
data$politics_overall_num <- as.numeric(data$politics_overall)
# Political binning: values < 4 indicate "Left" (on 1–7 ideology scale)
data$politics_overall_bin <- factor(
ifelse(data$politics_overall_num < 4, "Left", "Right"),
levels = c("Left", "Right")
)
# Derived binary: reluctant on ANY topic (≤ 3 on 7-point scale indicates discomfort expressing opinion)
data$at_least_one_reluctant <- factor(
apply(select(data, paste0(topics, "_discuss_score")), 1, function(row) any(row <= 3, na.rm = TRUE)),
levels = c(FALSE, TRUE),
labels = c("Not Reluctant", "Reluctant")
)
# Modeling label: average reluctance < 3 indicates general discomfort
data$reluctance_binary <- factor(
ifelse(data$controversial_discuss_score < 3, "Reluctant", "Not Reluctant"),
levels = c("Reluctant", "Not Reluctant")
)
summary(data$reluctance_binary)
summary(data$controversial_discuss_score)
table(data$gender_recoded)
table(data$ipeds_inst_control)
### Demographic Distributions
demo_table <- function(variable) {
freq_table <- table(variable)
df <- as.data.frame(freq_table)
colnames(df) <- c("Category", "Frequency")
df$Percentage <- sprintf("%.2f%%", df$Frequency / sum(df$Frequency) * 100)
return(nice_table(df))
}
demo_table(data$gender_recoded)
demo_table(data$race_recoded)
demo_table(data$politics_overall)
demo_table(data$religion_recoded)
demo_table(data$ipeds_inst_control)
baseline_model <- glm(reluctance_binary ~ controversial_discuss_score,
data = data, family = "binomial")
summary(baseline_model)
ggplot(data, aes(x = controversial_discuss_score, fill = reluctance_binary)) +
geom_histogram(binwidth = 0.1, position = "identity", alpha = 0.5, color = "black") +
labs(
title = "Observed Distribution of Discuss Scores by Reluctance Label",
subtitle = "Note: Fill colors show actual class labels, not model predictions",
x = "Average Reluctance Score (1–4)",
y = "Count"
) +
scale_fill_manual(values = c("Reluctant" = "red", "NotReluctant" = "blue"),
name = "Reluctance Binary") +
theme_minimal()
# Predicted probabilities from logistic regression
data$logit_pred_prob <- predict(baseline_model, type = "response")
ggplot(data, aes(x = logit_pred_prob, fill = reluctance_binary)) +
geom_histogram(bins = 30, alpha = 0.6, color = "black", position = "identity") +
labs(title = "Histogram of Predicted Probabilities",
x = "Predicted Probability of Being Reluctant",
y = "Count",
subtitle = "From logistic regression model") +
scale_fill_manual(values = c("Reluctant" = "red", "Not Reluctant" = "blue")) +
theme_minimal()
# Dummy Baseline Majority Class
# Set everyone to "Reluctant" (majority class)
data$dummy_pred <- factor("Reluctant", levels = levels(data$reluctance_binary))
# Ground truth
true_labels <- data$reluctance_binary
# Confusion matrix
library(caret)
confusionMatrix(data$dummy_pred, true_labels)
library(broom)
library(gt)
lm_model <- lm(controversial_discuss_score ~ politics_overall_num + extraversion + neuroticism + openness, data = data)
summary(lm_model)
tidy(lm_model) %>%
mutate(across(estimate:p.value, round, 4)) %>%
gt()
# 1. Residuals vs Fitted plot
plot(lm_model, which = 1)  # Base R diagnostic plot
# 2. Q-Q Plot of Residuals
plot(lm_model, which = 2)
# 3. Actual vs Predicted Plot
data$lm_pred <- predict(lm_model)
ggplot(data, aes(x = lm_pred, y = controversial_discuss_score, color = politics_overall_bin)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Predicted vs. Actual Discuss Score by Political Orientation",
x = "Predicted Score",
y = "Actual Score",
color = "Political Orientation") +
theme_minimal()
ggplot(data.frame(resid = residuals(lm_model)), aes(x = resid)) +
geom_histogram(bins = 40, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals")
library(cluster)
sil <- silhouette(kmeans_res$cluster, dist(pca_coords[, 1:2]))
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(pROC)
library(caret)
library(tidyLPA)
library(mice)
library(gt)
library(broom)
pca_data <- data %>%
select(paste0(topics, "_discuss_score")) %>%
drop_na()
pca_res <- PCA(pca_data, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_res)
pca_coords <- as.data.frame(pca_res$ind$coord[, 1:2])
colnames(pca_coords) <- c("Dim.1", "Dim.2")
data <- data %>%
mutate(original_index = row_number()) %>%
left_join(pca_coords %>% mutate(original_index = row_number()), by = "original_index")
set.seed(123)
kmeans_res <- kmeans(pca_coords, centers = 3, nstart = 25)
pca_coords$cluster <- factor(kmeans_res$cluster)
ggplot(pca_coords, aes(x = Dim.1, y = Dim.2, color = cluster)) +
geom_point(alpha = 0.6) +
labs(title = "K-Means Clusters on PCA Coordinates") +
theme_minimal()
library(cluster)
sil <- silhouette(kmeans_res$cluster, dist(pca_coords[, 1:2]))
fviz_silhouette(sil)
fviz_pca_var(pca_res, col.var = "contrib", repel = TRUE)
fviz_nbclust(pca_coords[, 1:2], kmeans, method = "wss")  # Within Sum of Squares
